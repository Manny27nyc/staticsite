from __future__ import annotations
from staticsite.feature import Feature
from staticsite.metadata import Metadata
import logging

log = logging.getLogger("nav")


class Nav(Feature):
    """
    Expand a 'pages' metadata containing a page filter into a list of pages.
    """
    RUN_AFTER = ["autogenerated_pages"]

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.site.register_metadata(Metadata("nav", inherited=True, structure=True, doc=f"""
List of page paths that are used for the navbar.
"""))
        self.site.register_metadata(Metadata("nav_title", inherited=False, doc=f"""
Title to use when this paged is linked in a navbar.

It defaults to `page.meta.title`, or to the series name for series pages.

`nav_title` is only guaranteed to exist for pages that are used in `nav`.
"""))

    def finalize(self):
        # Expand pages expressions
        nav_pages = set()

        for page in self.site.pages.values():
            nav = page.meta.get("nav")
            if nav is None:
                continue

            # Resolve everything
            nav = [page.resolve_path(path) for path in nav]

            # Build list of target pages
            nav_pages.update(nav)

            page.meta["nav"] = nav

        # Make sure nav_title is filled
        for page in nav_pages:
            if "nav_title" not in page.meta:
                page.meta["nav_title"] = page.meta["title"]


FEATURES = {
    "nav": Nav,
}
